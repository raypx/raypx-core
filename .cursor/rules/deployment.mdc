---
description: Deployment and Environment Configuration Guidelines
globs: **/.env.*,**/vercel.json,**/next.config.*
alwaysApply: false
---
# Deployment and DevOps Guidelines

## Core Principles

- Implement CI/CD pipelines for automated testing and deployment
- Use containerization for consistent environments
- Follow twelve-factor app methodology
- Implement proper environment configuration management
- Set up monitoring and logging from day one
- Use infrastructure as code when possible
- Implement proper security measures in production
- Plan for scalability and high availability

## Environment Configuration

### Environment Variables Structure
```typescript
// ✅ Good - Structured environment configuration
import { z } from 'zod'

const envSchema = z.object({
  // Node environment
  NODE_ENV: z.enum(['development', 'staging', 'production']),
  
  // Application
  APP_URL: z.string().url(),
  PORT: z.coerce.number().default(3000),
  
  // Database
  DATABASE_URL: z.string().url(),
  DATABASE_SSL: z.boolean().default(true),
  DATABASE_POOL_SIZE: z.coerce.number().default(10),
  
  // Redis
  REDIS_URL: z.string().url(),
  REDIS_MAX_RETRIES: z.coerce.number().default(3),
  
  // Authentication
  JWT_SECRET: z.string().min(32),
  JWT_EXPIRES_IN: z.string().default('7d'),
  
  // External APIs
  STRIPE_SECRET_KEY: z.string().startsWith('sk_'),
  STRIPE_WEBHOOK_SECRET: z.string().startsWith('whsec_'),
  RESEND_API_KEY: z.string().startsWith('re_'),
  
  // Monitoring
  SENTRY_DSN: z.string().url().optional(),
  ANALYTICS_ID: z.string().optional(),
  
  // Feature flags
  FEATURE_NEW_DASHBOARD: z.boolean().default(false),
  FEATURE_BETA_FEATURES: z.boolean().default(false),
})

export const env = envSchema.parse(process.env)

// Environment-specific configurations
export const config = {
  development: {
    logLevel: 'debug',
    cors: { origin: ['http://localhost:3000'] },
    rateLimit: { enabled: false },
  },
  staging: {
    logLevel: 'info',
    cors: { origin: ['https://staging.raypx.com'] },
    rateLimit: { enabled: true, requests: 1000 },
  },
  production: {
    logLevel: 'error',
    cors: { origin: ['https://raypx.com'] },
    rateLimit: { enabled: true, requests: 100 },
  },
} as const

export const currentConfig = config[env.NODE_ENV]
```

### Environment Files
```bash
# .env.local (development)
NODE_ENV=development
APP_URL=http://localhost:3000
DATABASE_URL=postgresql://user:password@localhost:5432/raypx_dev
REDIS_URL=redis://localhost:6379
JWT_SECRET=your-super-secure-jwt-secret-key-here

# .env.staging
NODE_ENV=staging
APP_URL=https://staging.raypx.com
DATABASE_URL=postgresql://user:password@staging-db:5432/raypx_staging
REDIS_URL=redis://staging-redis:6379
JWT_SECRET=${JWT_SECRET}

# .env.production
NODE_ENV=production
APP_URL=https://raypx.com
DATABASE_URL=${DATABASE_URL}
REDIS_URL=${REDIS_URL}
JWT_SECRET=${JWT_SECRET}
```

## Docker Configuration

### Multi-Stage Dockerfile
```dockerfile
# ✅ Good - Optimized multi-stage Docker build
# syntax=docker/dockerfile:1

FROM node:20-alpine AS base
# Enable corepack for pnpm
RUN corepack enable
RUN corepack prepare pnpm@latest --activate

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/web/package.json ./apps/web/
COPY packages/*/package.json ./packages/*/

# Install dependencies
RUN pnpm install --frozen-lockfile --prod=false

# Build the application
FROM base AS builder
WORKDIR /app

# Copy dependencies and source code
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build the application
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1

RUN pnpm build --filter=web

# Production runtime
FROM base AS runner
WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/apps/web/public ./apps/web/public
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Expose port
EXPOSE 3000

# Switch to non-root user
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start the application
CMD ["node", "apps/web/server.js"]
```

### Docker Compose Development
```yaml
# ✅ Good - Docker Compose for development
# docker-compose.dev.yml
version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/raypx_dev
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: raypx_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
```

## Vercel Deployment

### Vercel Configuration
```json
// ✅ Good - Vercel configuration
{
  "version": 2,
  "buildCommand": "pnpm build --filter=web",
  "outputDirectory": "apps/web/.next",
  "installCommand": "pnpm install",
  "framework": "nextjs",
  "regions": ["iad1", "hkg1", "syd1"],
  "functions": {
    "apps/web/app/api/**/*.ts": {
      "maxDuration": 30
    }
  },
  "headers": [
    {
      "source": "/api/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options", 
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        }
      ]
    }
  ],
  "redirects": [
    {
      "source": "/admin/:path*",
      "destination": "/dashboard/:path*",
      "permanent": true
    }
  ],
  "rewrites": [
    {
      "source": "/docs/:path*",
      "destination": "https://docs.raypx.com/:path*"
    }
  ],
  "crons": [
    {
      "path": "/api/cron/cleanup",
      "schedule": "0 0 * * *"
    }
  ]
}
```

### Build Optimization
```typescript
// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Production optimizations
  experimental: {
    optimizeCss: true,
    optimizeServerReact: true,
    webpackBuildWorker: true,
  },
  
  // Bundle analysis
  ...(process.env.ANALYZE === 'true' && {
    webpack: (config) => {
      config.plugins.push(new BundleAnalyzerPlugin())
      return config
    },
  }),

  // Image optimization
  images: {
    formats: ['image/webp', 'image/avif'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    dangerouslyAllowSVG: true,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  },

  // Compression
  compress: true,
  
  // Security headers
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains; preload',
          },
        ],
      },
    ]
  },
}

module.exports = nextConfig
```

## CI/CD Pipeline

### GitHub Actions Workflow
```yaml
# ✅ Good - Complete CI/CD pipeline
# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'

jobs:
  # Code Quality Checks
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run check

      - name: Run type checking
        run: pnpm run build --dry-run

      - name: Check for unused dependencies
        run: pnpm exec knip

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: raypx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        run: pnpm exec drizzle-kit migrate
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/raypx_test

      - name: Run unit tests
        run: pnpm test --coverage
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/raypx_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, security-audit, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            apps/web/.next/
            !apps/web/.next/cache

  # Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
```

### Deployment Scripts
```bash
#!/bin/bash
# ✅ Good - Deployment script
# scripts/deploy.sh

set -euo pipefail

# Configuration
ENV=${1:-staging}
DOCKER_IMAGE="raypx-app"
DOCKER_TAG="$(git rev-parse --short HEAD)"

echo "🚀 Deploying $DOCKER_IMAGE:$DOCKER_TAG to $ENV environment"

# Build Docker image
echo "📦 Building Docker image..."
docker build -t "$DOCKER_IMAGE:$DOCKER_TAG" -t "$DOCKER_IMAGE:latest" .

# Run security scan
echo "🔐 Running security scan..."
docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
  -v "$(pwd)/.trivyignore:/.trivyignore" \
  aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL "$DOCKER_IMAGE:$DOCKER_TAG"

# Run database migrations
echo "🗄️ Running database migrations..."
docker run --rm \
  --env-file .env.$ENV \
  "$DOCKER_IMAGE:$DOCKER_TAG" \
  pnpm exec drizzle-kit migrate

# Deploy based on environment
case $ENV in
  staging)
    echo "🎯 Deploying to staging..."
    docker-compose -f docker-compose.staging.yml up -d
    ;;
  production)
    echo "🎯 Deploying to production..."
    # Blue-green deployment
    ./scripts/blue-green-deploy.sh "$DOCKER_IMAGE:$DOCKER_TAG"
    ;;
  *)
    echo "❌ Unknown environment: $ENV"
    exit 1
    ;;
esac

echo "✅ Deployment complete!"

# Run health checks
echo "🏥 Running health checks..."
./scripts/health-check.sh "$ENV"

echo "🎉 Deployment successful!"
```

## Monitoring and Logging

### Application Monitoring
```typescript
// ✅ Good - Application monitoring setup
import * as Sentry from '@sentry/nextjs'
import { Analytics } from '@vercel/analytics/react'
import { SpeedInsights } from '@vercel/speed-insights/next'

// Sentry configuration
Sentry.init({
  dsn: process.env.SENTRY_DSN,
  environment: process.env.NODE_ENV,
  tracesSampleRate: process.env.NODE_ENV === 'production' ? 0.1 : 1.0,
  beforeSend(event) {
    // Filter out known issues
    if (event.exception) {
      const error = event.exception.values?.[0]
      if (error?.value?.includes('Network Error')) {
        return null // Don't send network errors
      }
    }
    return event
  },
  integrations: [
    new Sentry.BrowserTracing({
      tracePropagationTargets: ['localhost', 'raypx.com'],
    }),
  ],
})

// Performance monitoring
export function performanceMonitor(name: string) {
  const start = performance.now()
  
  return {
    end: () => {
      const duration = performance.now() - start
      
      // Log slow operations
      if (duration > 1000) {
        console.warn(`Slow operation: ${name} took ${duration.toFixed(2)}ms`)
      }
      
      // Send to monitoring service
      if (typeof window !== 'undefined' && 'gtag' in window) {
        // @ts-ignore
        gtag('event', 'timing_complete', {
          name,
          value: Math.round(duration),
        })
      }
    },
  }
}

// Usage
export async function slowFunction() {
  const monitor = performanceMonitor('slowFunction')
  
  try {
    // Your slow operation here
    await someSlowOperation()
  } finally {
    monitor.end()
  }
}
```

### Health Checks
```typescript
// ✅ Good - Comprehensive health checks
// app/api/health/route.ts
import { NextResponse } from 'next/server'
import { db } from '@raypx/db'
import { createRedis } from '@raypx/redis'

const redis = createRedis(process.env.REDIS_URL!)

interface HealthCheck {
  status: 'healthy' | 'unhealthy' | 'degraded'
  checks: {
    [key: string]: {
      status: 'pass' | 'fail'
      time?: number
      error?: string
    }
  }
  timestamp: string
  version: string
  uptime: number
}

export async function GET() {
  const startTime = Date.now()
  const checks: HealthCheck['checks'] = {}

  // Database health check
  try {
    const dbStart = Date.now()
    await db.execute('SELECT 1')
    checks.database = {
      status: 'pass',
      time: Date.now() - dbStart,
    }
  } catch (error) {
    checks.database = {
      status: 'fail',
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }

  // Redis health check
  try {
    const redisStart = Date.now()
    await redis.ping()
    checks.redis = {
      status: 'pass',
      time: Date.now() - redisStart,
    }
  } catch (error) {
    checks.redis = {
      status: 'fail',
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }

  // External API health check
  try {
    const apiStart = Date.now()
    const response = await fetch('https://api.external-service.com/health', {
      timeout: 5000,
    })
    checks.externalApi = {
      status: response.ok ? 'pass' : 'fail',
      time: Date.now() - apiStart,
    }
  } catch (error) {
    checks.externalApi = {
      status: 'fail',
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }

  // Determine overall status
  const failedChecks = Object.values(checks).filter(check => check.status === 'fail')
  const status: HealthCheck['status'] = 
    failedChecks.length === 0 ? 'healthy' :
    failedChecks.length === 1 ? 'degraded' : 'unhealthy'

  const healthStatus: HealthCheck = {
    status,
    checks,
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || 'unknown',
    uptime: process.uptime(),
  }

  const statusCode = status === 'healthy' ? 200 : status === 'degraded' ? 200 : 503

  return NextResponse.json(healthStatus, { status: statusCode })
}
```

## Database Operations

### Database Migrations in Production
```bash
#!/bin/bash
# ✅ Good - Production migration script
# scripts/migrate-production.sh

set -euo pipefail

echo "🗄️ Starting production database migration..."

# Backup database before migration
echo "📦 Creating database backup..."
pg_dump $DATABASE_URL > "backup-$(date +%Y%m%d_%H%M%S).sql"

# Run migrations with rollback capability
echo "🔄 Running migrations..."
if pnpm exec drizzle-kit migrate; then
  echo "✅ Migrations completed successfully"
  
  # Verify data integrity
  echo "🔍 Verifying data integrity..."
  psql $DATABASE_URL -c "SELECT COUNT(*) FROM users;"
  
  echo "🎉 Migration complete!"
else
  echo "❌ Migration failed, consider rollback"
  exit 1
fi
```

### Zero-Downtime Deployment
```bash
#!/bin/bash
# ✅ Good - Blue-green deployment script
# scripts/blue-green-deploy.sh

set -euo pipefail

IMAGE_TAG=${1:-latest}
CURRENT_COLOR=$(docker ps --filter "label=app=raypx" --format "{{.Labels}}" | grep -o 'color=[^,]*' | cut -d= -f2 | head -1)

# Determine new color
if [ "$CURRENT_COLOR" = "blue" ]; then
  NEW_COLOR="green"
  OLD_COLOR="blue"
else
  NEW_COLOR="blue"
  OLD_COLOR="green"
fi

echo "🔄 Deploying $NEW_COLOR environment with image $IMAGE_TAG"

# Start new environment
docker-compose -f docker-compose.$NEW_COLOR.yml up -d

# Wait for health check
echo "🏥 Waiting for health check..."
for i in {1..30}; do
  if curl -f http://localhost:${NEW_COLOR_PORT}/api/health; then
    echo "✅ Health check passed"
    break
  fi
  
  if [ $i -eq 30 ]; then
    echo "❌ Health check failed"
    docker-compose -f docker-compose.$NEW_COLOR.yml down
    exit 1
  fi
  
  sleep 10
done

# Update load balancer
echo "⚖️ Updating load balancer..."
# Update your load balancer configuration here

# Wait for traffic to drain
sleep 30

# Stop old environment
echo "🛑 Stopping $OLD_COLOR environment..."
docker-compose -f docker-compose.$OLD_COLOR.yml down

echo "🎉 Blue-green deployment complete!"
```

## Best Practices

### Deployment Checklist
- [ ] Environment variables are properly configured
- [ ] Database migrations run successfully
- [ ] Health checks pass in staging environment
- [ ] Security headers are configured
- [ ] SSL certificates are valid and auto-renewing
- [ ] Monitoring and alerting are set up
- [ ] Backup and recovery procedures are tested
- [ ] Performance benchmarks meet requirements
- [ ] Load testing has been performed
- [ ] Rollback procedures are documented and tested

### Security Considerations
- [ ] Secrets are stored in secure secret management systems
- [ ] Container images are scanned for vulnerabilities
- [ ] Network security groups are properly configured
- [ ] Access controls follow principle of least privilege
- [ ] Audit logging is enabled
- [ ] Rate limiting is configured
- [ ] CORS policies are restrictive
- [ ] Security headers are implemented

### Performance Optimization
- [ ] CDN is configured for static assets
- [ ] Database queries are optimized
- [ ] Caching strategies are implemented
- [ ] Image optimization is enabled
- [ ] Bundle size is minimized
- [ ] Server-side rendering is optimized
- [ ] Database connection pooling is configured
- [ ] Memory and CPU usage are monitored

Remember: Deployment is not just about getting code to production - it's about maintaining reliability, security, and performance while enabling rapid iteration and rollback capabilities.